
// Collision between two masses
for (int p2 = 0; p2 < body2->points.size(); p2++) {
    Vector2 dist_v = body2->points[p2].pos - body1->points[p].pos;
    float dist_between = dist_v.length();
    if (dist_between < 2 * point_simulated_radius) {
        Vector2 shift_vector = dist_v * 0.5 * (( 2 * point_simulated_radius - dist_between) / dist_between);
        body1->points[p].pos = body1->points[p].pos - shift_vector;
        body2->points[p2].pos = body2->points[p2].pos + shift_vector;

        Vector2 n = dist_v.normalized();
        Vector2 tan = Vector2(-n.y,n.x);

        float ndp1 = dot(n, body1->points[p].velo);
        float ndp2 = dot(n, body2->points[p2].velo);

        float tdp1 = dot(tan, body1->points[p].velo);
        float tdp2 = dot(tan, body2->points[p2].velo);

        float mass1 = 1.0;
        float mass2 = 1.0;

        float nor_m1 = (ndp1 * (mass1 - mass2) + 2.0f * mass2 * ndp2) / (mass1 + mass2);
        float nor_m2 = (ndp2 * (mass2 - mass1) + 2.0f * mass1 * ndp1) / (mass1 + mass2);

        body1->points[p].velo = n * nor_m1 * body_body_normal_bouncienes + tan * tdp1 * body_body_tangent_bouncienes;
        body2->points[p2].velo = n * nor_m2 * body_body_normal_bouncienes + tan * tdp2 * body_body_tangent_bouncienes;
    }
}


// Solves point displacement for hard stick
void solve_stick_collisions() {
    for (int b = 0; b < bodys.size(); b++) {
        for (int s = 0; s < bodys[b].springs.size(); s++) {
            Spring spring = bodys[b].springs[s];
            Vector2 dist_v = spring.point_B->pos - spring.point_A->pos;
            float dist_f = dist_v.length();
            Vector2 shift_vector = dist_v * 0.5 * ((spring.lenght - dist_f) / dist_f);
            spring.point_A->pos = spring.point_A->pos - shift_vector;
            spring.point_B->pos = spring.point_B->pos + shift_vector;
        }
    }
}